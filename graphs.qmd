# Some statistics...

```{r, include=FALSE}
knitr::opts_chunk$set(message = FALSE,
                      warning = FALSE,
                      comment = FALSE)
library(tidyverse)
```

## Read all graphs from a level of the experiment

Read all graphs from a level from experiment; for example individuals. We read only firts (alphabetic) two graph


# Graph kernels

**Graph Kernels package**

[graphkernels: R and Python packages for graph comparison](https://academic.oup.com/bioinformatics/article/34/3/530/4209994?login=true) statGraph' [Discriminating Different Classes of Biological Networks by Analyzing the Graphs Spectra Distribution](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0049949)


```{r}
load("Similarities.Rdata")
path_exp="data/results_ff15c187-62e7-37c2-96a7-c824f7eab671/data/"
list_names=dir(paste0(path_exp,"Individuals/"))
#list_names
list_names= list_names[-1] # filter 0000_RefPw
length(list_names)
#list_names
#dir(paste0("Individuals/",list_names[1],"/"))
library(igraph)
graphs_list=paste0(path_exp,"Individuals/",list_names,"/",list_names,"_MDAG.graphml")
#head(as_long_data_frame(g_MDAG_list[[1]]))
```


```{r}
knitr::include_graphics(
  paste0(path_exp,"Individuals/cang/cang_mDAG.svg"))
```

```{r}
knitr::include_graphics(paste0(path_exp,"Individuals/cang/cang_mDAG_essential.svg"))
```

```{r}
knitr::include_graphics(
  paste0(path_exp,"Individuals/cang/cang_RC.svg"))
```




## Graph statistics






```{r}
#x=graphs_list[[1]]
read_mDAG=function(x) {DAG=read.graph(file=x,
                                  format="graphml")
  return(DAG)}
mDAG_componets=function(x) {sort(components(x,mode = "weak")$csize,
                                 decreasing=TRUE)}



compo_list=lapply(graphs_list,
                  FUN=function(x) {
                    gg=read_mDAG(x)
                  aux=list(
                    mDAG_componets=mDAG_componets(gg),
                    degree_count=igraph::degree(gg,mode="total"))
                    return(aux)}
                  )

names(compo_list)=list_names
n=max(sapply(compo_list,FUN=function(x) {length(x[[1]])}))
n
size_compo_list=lapply(compo_list,FUN=function(x) {
  return(c(x[[1]],rep(NA,n-length(x[[1]]))))})

aux=do.call(bind_cols,size_compo_list)
aux2=pivot_longer(aux,aaf:zvi,names_to="Organism",
                  values_to="csize")%>%
  arrange(Organism,-csize)
aux2$index=rep(1:n,times=dim(aux)[2])
aux2=aux2 %>% left_join(meta_taxo,by="Organism")
```

```{r}
#ggplot(aux2,aes(index,csize),color=Organism)+ geom_line()


ggplot(data=aux2)+geom_smooth(mapping=aes(x=index,y=csize,group = Organism),se = FALSE,na.rm=TRUE,fullrange=TRUE)+ylim(0,max(aux2$csize))
## buenos
COLOR_KINGDOM=c("red","black","green","yellow")
colors_kingdom=aux2 %>% select(Organism,Kingdom) %>% distinct()
names(COLOR_KINGDOM)=sort(unique(colors_kingdom$Kingdom))

ggplot(data=aux2,col=rep("blue",dim(aux)[2])) + 
  geom_line(mapping=aes(x=index,y=csize,group = Organism,color=Kingdom)) + 
  scale_x_continuous(trans='log10') + 
  scale_y_continuous(trans='log10') +
  ylim(0,max(aux2$csize)) +
  scale_color_manual(values =COLOR_KINGDOM[colors_kingdom$Kingdom])

ggplot(data=aux2,col=rep("blue",dim(aux)[2])) + 
  geom_smooth(mapping=aes(x=index,y=csize,group = Organism,color=Kingdom),) + 
  scale_x_continuous(trans='log10') + 
  scale_y_continuous(trans='log10') +
  ylim(0,max(aux2$csize)) +
  scale_color_manual(values =COLOR_KINGDOM[colors_kingdom$Kingdom])

ggplot(data=aux2,col=rep("blue",dim(aux)[2])) + 
  geom_line(mapping=aes(x=index,y=csize,group = Organism,color=Kingdom)) + 
  ylim(0,max(aux2$csize)) +
  scale_color_manual(values =COLOR_KINGDOM[colors_kingdom$Kingdom])
## fin buenos

ggplot(data = aux2,color=Phylum) +
  geom_line(mapping = aes(x = index, y = csize, group = Organism),size=0.1) +
  scale_x_log10() +
  scale_y_log10() + 
  ylim(0, max(aux2$csize))

ggplot(data=aux2)+
  geom_smooth(
    mapping=aes(x=index,y=csize,group = Organism,color=Kingdom),
              se = FALSE,
    na.rm=TRUE,
    fullrange=TRUE)+
  scale_x_log10()+
  scale_y_log10()+
  ylim(0,log(max(aux2$csize))+10)+
  scale_color_manual(values =COLOR_KINGDOM[colors_kingdom$Kingdom])
## fin buenos
```

```{r}
library(GGally)
aa=as.tibble(t(aux))
dim(aa)
names(aa)[1:(dim(aa)[2])]=paste0("C",1:dim(aa)[2])
aux3=bind_cols(Organism=colnames(aux),aa) %>% left_join(meta_taxo,by="Organism")
library(naniar)
# 
# #View(aux3)
# 
# #ggparcoord(data =aux3,
#            columns  = 2:200,
#            groupColumn="Kingdom",missing ="exclude")
# 
# ggparcoord(data =as.tibble(iris),
#            columns = 1:4,
#            groupColumn = "Species")

```

